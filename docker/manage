#!/bin/bash

export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host eclipse/che-ip)}
export MSYS_NO_PATHCONV=1
set -e

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------

usage() {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build - Build the docker images for the project.
          You need to do this first, since the builds require
          a combination of Docker images.

  up  - Creates the application container from the built images
        and starts the services based on the docker-compose.yml file.
  start - Same as up

  logs - Display the logs from the docker compose run (ctrl-c to exit).

  stop - Stops the services.  This is a non-destructive process.  The volumes and containers
         are not deleted so they will be reused the next time you run start.

  down - Brings down the services and removes the volumes (storage) and containers.
  rm - Same as down

EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------

DEFAULT_CONTAINERS=""

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

configureEnvironment () {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export $line
      fi
    done < .env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  # bcreg-controller
  export CONTROLLER_PORT=5000
  export EXPOSED_CONTROLLER_PORT=5000
  export WEB_HTTP_PORT=5001
  export WEB_HOST_PORT=8081
  export COMPOSE_PROJECT_NAME=myorg
  export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-"myorg"}
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export APPLICATION_URL=${APPLICATION_URL-http://localhost:${WEB_HTTP_PORT:-5001}}
  export ENDPOINT_URL=http://${ENDPOINT_HOST-$DOCKERHOST:${WEB_HTTP_PORT:-5001}}

  export RECORD_TIMINGS=${RECORD_TIMINGS:-false}
  export TRACE_EVENTS=${TRACE_EVENTS:-false}
  export TRACE_TARGET=${TRACE_TARGET:-log}
  # set this one manually to trace a percentage of issued credential exchanges
  export TRACE_MSG_PCT=${TRACE_MSG_PCT:-0}
  export ACK_ERROR_PCT=${ACK_ERROR_PCT:-0}

  # myorg-agent
  export AGENT_ADMIN_PORT=8034
  export TOB_AGENT_ADMIN_PORT=8024
  export WEBHOOK_PORT=5000
  #export INDY_WALLET_DID=...
  export AGENT_HTTP_IN_PORT=8031
  export AGENT_WS_IN_PORT=8033
  export WEBHOOK_HOST=http://myorg-controller:${WEBHOOK_PORT}
  export AGENT_NAME="myorg-agent"
  export AGENT_ENDPOINT=${AGENT_ENDPOINT:-http://$DOCKERHOST:$AGENT_HTTP_IN_PORT}
  export AGENT_ADMIN_API_KEY=${AGENT_ADMIN_API_KEY}
  export AGENT_ADMIN_MODE="admin-insecure-mode"
  if [ ! -z "${AGENT_ADMIN_API_KEY}" ]; then
    AGENT_ADMIN_MODE="admin-api-key ${AGENT_ADMIN_API_KEY}"
  fi
  export AGENT_TIMING_MODE=""
  if [ "${RECORD_TIMINGS}" = "true" ]; then
    AGENT_TIMING_MODE="--timing"
  fi
  export AGENT_TRACE_MODE=""
  if [ "${TRACE_EVENTS}" = "true" ]; then
    AGENT_TRACE_MODE="--trace"
  fi

  # wallet-db
  export POSTGRESQL_DATABASE="THE_ORG_BOOK"
  export POSTGRESQL_USER="DB_USER"
  export POSTGRESQL_PASSWORD="DB_PASSWORD"
  export WALLET_TYPE="postgres_storage"
  export WALLET_ENCRYPTION_KEY="key"
  export POSTGRESQL_WALLET_HOST="myorg-wallet-db"
  export POSTGRESQL_WALLET_PORT="5432"
  export POSTGRESQL_ADMIN_USER="postgres"
  export POSTGRESQL_ADMIN_PASSWORD="mysecretpassword"
  export WALLET_SEED_VONX=${WALLET_SEED_VONX:-"myorg_issuer_0000000000000000001"}

  # myorg-pipeline
  export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-"vonx"}
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export APPLICATION_URL=${APPLICATION_URL-http://localhost:${WEB_HTTP_PORT:-5000}}
  export ENDPOINT_URL=http://${ENDPOINT_HOST-$DOCKERHOST:${WEB_HTTP_PORT:-5001}}
  export VONX_API_URL=http://myorg-controller:${WEBHOOK_PORT}

  # myorg-controller
  export TOB_AGENT_ADMIN_URL=${TOB_AGENT_ADMIN_URL:-http://${DOCKERHOST}:${TOB_AGENT_ADMIN_PORT}} 
  export TOB_CONNECTION_NAME=${TOB_CONNECTION_NAME:-vcr-agent} 
  export TOB_ADMIN_API_KEY=${TOB_ADMIN_API_KEY:-R2D2HfPM5Zwd69IjclQiuFmcMV6}
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""
  if [ "$COMMAND" == "start" ]; then
    ARGS+="--force-recreate"
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

build() {
  # Build all containers in the docker-compose file
  echo -e "\nBuilding containers ..."
  echo docker-compose build $@
  docker-compose build $@
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v
}

# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$1
shift || true

case "$COMMAND" in
  start|up)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    docker-compose up -d ${_startupParams}
    docker-compose logs -f
    ;;
  logs)
    configureEnvironment $@
    docker-compose logs -f
    ;;
  stop)
    configureEnvironment $@
    docker-compose stop
    ;;
  rm|down)
    configureEnvironment $@
    deleteVolumes
    ;;
  build)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    build ${_startupParams}
    ;;
  *)
    usage
esac

popd >/dev/null
