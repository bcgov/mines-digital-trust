#!/bin/bash

# getDockerHost; for details refer to https://github.com/bcgov/DITP-DevOps/tree/main/code/snippets#getdockerhost
. /dev/stdin <<<"$(cat <(curl -s --raw https://raw.githubusercontent.com/bcgov/DITP-DevOps/main/code/snippets/getDockerHost))" 
export DOCKERHOST=$(getDockerHost)
export MSYS_NO_PATHCONV=1
set -e

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------

usage() {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build - Build the docker images for the project.
          You need to do this first, since the builds require
          a combination of Docker images.

  up  - Creates the application container from the built images
        and starts the services based on the docker-compose.yml file.
  start - Same as up

  logs - Display the logs from the docker compose run (ctrl-c to exit).

  stop - Stops the services.  This is a non-destructive process.  The volumes and containers
         are not deleted so they will be reused the next time you run start.

  down - Brings down the services and removes the volumes (storage) and containers.
  rm - Same as down

EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------

DEFAULT_CONTAINERS=""

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

configureEnvironment () {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export $line
      fi
    done < .env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  #
  # External Configuration - The Org Book & Ledger
  #
  export TOB_API_URL=${TOB_API_URL-http://localhost:8081/api/v2}
  export TOB_APP_URL=${TOB_APP_URL-http://localhost:8080}
  export TOB_AGENT_ADMIN_PORT=8024
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}

  # specify this as anything other than "true" to force manual connection to the TOB agent
  export REGISTER_TOB_CONNECTION=${REGISTER_TOB_CONNECTION:-true}
  if [  "${REGISTER_TOB_CONNECTION}" = "true"  ]; then
    export TOB_AGENT_ADMIN_URL=${TOB_AGENT_ADMIN_URL:-http://${DOCKERHOST}:${TOB_AGENT_ADMIN_PORT}}
  fi
  export TOB_CONNECTION_NAME=${TOB_CONNECTION_NAME:-avcr.agent}
  export TOB_ADMIN_API_KEY=${TOB_ADMIN_API_KEY:-R2D2HfPM5Zwd69IjclQiuFmcMV6}

  #
  # Common Configuration
  #
  #
  export COMPOSE_PROJECT_NAME=myorg
  export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-"myorg"}
  export LOG_LEVEL=${LOG_LEVEL:-"warning"}
  export RECORD_TIMINGS=${RECORD_TIMINGS:-false}
  export TRACE_EVENTS=${TRACE_EVENTS:-false}
  export TRACE_TARGET=${TRACE_TARGET:-log}
  # set this one manually to trace a percentage of issued credential exchanges
  export TRACE_MSG_PCT=${TRACE_MSG_PCT:-0}
  export ACK_ERROR_PCT=${ACK_ERROR_PCT:-0}

  export LOG_LEVEL=${LOG_LEVEL:-"warning"}

  export INTERNAL_CONTROLLER_PORT=5000
  export INTERNAL_AGENT_HTTP_IN_PORT=8031
  export INTERNAL_AGENT_WS_IN_PORT=8033
  export INTERNAL_AGENT_ADMIN_PORT=8034
  export INTERNAL_WALLET_PORT=5432
  #export INDY_WALLET_DID=...
  export AGENT_ADMIN_API_KEY=${AGENT_ADMIN_API_KEY}
  export AGENT_ADMIN_MODE="admin-insecure-mode"
  if [ ! -z "${AGENT_ADMIN_API_KEY}" ]; then
    AGENT_ADMIN_MODE="admin-api-key ${AGENT_ADMIN_API_KEY}"
  fi
  export AGENT_TIMING_MODE=""
  if [ "${RECORD_TIMINGS}" = "true" ]; then
    AGENT_TIMING_MODE="--timing"
  fi
  export AGENT_TRACE_MODE=""
  if [ "${TRACE_EVENTS}" = "true" ]; then
    AGENT_TRACE_MODE="--trace"
  fi

  export POSTGRESQL_DATABASE="THE_ORG_BOOK"
  export POSTGRESQL_USER="DB_USER"
  export POSTGRESQL_PASSWORD="DB_PASSWORD"
  export WALLET_TYPE="postgres_storage"
  export WALLET_ENCRYPTION_KEY="key"

  export POSTGRESQL_WALLET_PORT="5432"
  export POSTGRESQL_ADMIN_USER="postgres"
  export POSTGRESQL_ADMIN_PASSWORD="mysecretpassword"

  #
  # mines-permitting (mp)
  #
  export MP_EXPOSED_CONTROLLER_PORT=5000
  export MP_EXPOSED_AGENT_HTTP_IN_PORT=8031
  export MP_EXPOSED_AGENT_WS_IN_PORT=8033
  export MP_EXPOSED_AGENT_ADMIN_PORT=8034
  export MP_EXPOSED_WALLET_PORT=5435
  export MP_APPLICATION_URL=${MP_APPLICATION_URL-http://localhost:${MP_EXPOSED_CONTROLLER_PORT}}
  export MP_ENDPOINT_URL=http://${ENDPOINT_HOST-$DOCKERHOST:${MP_EXPOSED_CONTROLLER_PORT}}
  export MP_WEBHOOK_HOST=http://mp-controller:${INTERNAL_CONTROLLER_PORT}
  export MP_AGENT_ADMIN_URL=http://mp-agent:${INTERNAL_AGENT_ADMIN_PORT}
  export MP_AGENT_NAME="mines-permitting-agent"
  export MP_AGENT_ENDPOINT=${MP_AGENT_ENDPOINT:-http://$DOCKERHOST:$MP_EXPOSED_AGENT_HTTP_IN_PORT}
  export MP_WALLET_HOST="mp-wallet-db"
  export MP_WALLET_SEED_VONX=${MP_WALLET_SEED_VONX:-"mp_00000000000000000000000000001"}

  #
  # ghg-reporting
  #
  export GHG_EXPOSED_CONTROLLER_PORT=6000
  export GHG_EXPOSED_AGENT_HTTP_IN_PORT=9031
  export GHG_EXPOSED_AGENT_WS_IN_PORT=9033
  export GHG_EXPOSED_AGENT_ADMIN_PORT=9034
  export GHG_EXPOSED_WALLET_PORT=6435
  export GHG_APPLICATION_URL=${GHG_APPLICATION_URL-http://localhost:${GHG_EXPOSED_CONTROLLER_PORT}}
  export GHG_ENDPOINT_URL=http://${ENDPOINT_HOST-$DOCKERHOST:${GHG_EXPOSED_CONTROLLER_PORT}}
  export GHG_WEBHOOK_HOST=http://ghg-controller:${INTERNAL_CONTROLLER_PORT}
  export GHG_AGENT_ADMIN_URL=http://ghg-agent:${INTERNAL_AGENT_ADMIN_PORT}
  export GHG_AGENT_NAME="ghg-agent"
  export GHG_AGENT_ENDPOINT=${GHG_AGENT_ENDPOINT:-http://$DOCKERHOST:$GHG_EXPOSED_AGENT_HTTP_IN_PORT}
  export GHG_WALLET_HOST="ghg-wallet-db"
  export GHG_WALLET_SEED_VONX=${GHG_WALLET_SEED_VONX:-"ghg_0000000000000000000000000001"}

}

getStartupParams() {
  CONTAINERS=""
  ARGS=""
  if [ "$COMMAND" == "start" ]; then
    ARGS+="--force-recreate"
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

build() {
  # Build all containers in the docker-compose file
  echo -e "\nBuilding containers ..."
  echo docker-compose build $@
  docker-compose build $@
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v
}

# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$1
shift || true

case "$COMMAND" in
  start|up)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    docker-compose up -d ${_startupParams}
    docker-compose logs -f
    ;;
  logs)
    configureEnvironment $@
    docker-compose logs -f
    ;;
  stop)
    configureEnvironment $@
    docker-compose stop
    ;;
  rm|down)
    configureEnvironment $@
    deleteVolumes
    ;;
  build)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    build ${_startupParams}
    ;;
  *)
    usage
esac

popd >/dev/null
