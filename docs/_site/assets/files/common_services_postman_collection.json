{
	"info": {
		"_postman_id": "7d740c0f-fdde-429b-814c-130d9793c811",
		"name": "Common Services",
		"description": "# Common Services - APIs\nThis Postman collection demonstrates the APIs available to you with your Common Services client.  \n\n## Services\nPlease review the API documents before proceeding. The more familiar you are with the API calls, the more useful you will find the examples in this collection.  \n\n### CHES\nThe CHES API is capable of doing the following:\n\n* Send emails with attachments and special business tagging. \n* Schedule for delayed delivery, with ability to cancel. \n* Create bulk email merge with your own templates.  \n* Send plain text or HTML emails. \n* Track the status of your request. \n\nReview the v1 API specification [here](https://ches.nrs.gov.bc.ca/api/v1/docs).  \n\nSee Showcase application [here](https://chess.apps.silver.devops.gov.bc.ca/app/).  \n\n### CDOGS\nThe CDOGS API is capable of doing the following:\n\n* Merge complex datasets into document templates. \n* Supports any XML-based document templates including but not limited to Microsoft Office™, LibreOffice™ or OpenOffice™. \n* Rich templating library support leveraging the Carbone JS library. \n\nReview the v1 API specification [here](https://cdogs.nrs.gov.bc.ca/api/v1/docs#tag/DocGen).  \n\nReview the v2 API specification [here](https://cdogs.nrs.gov.bc.ca/api/v2/docs#tag/DocGen).\n\nSee Showcase application [here](https://dgrsc.apps.silver.devops.gov.bc.ca/dgrsc/).  \n\n\n## Setup\nYou will need to set the [collection variables](https://learning.postman.com/docs/postman/collections/intro-to-collections/), or run the tests with an [environment](https://learning.postman.com/docs/postman/variables-and-environments/managing-environments/) that configures the following:  \n\n| Name | Description |\n| --- | --- |\n| auth\\_host | Host for authentication service to get client token |\n| cdogs\\_host | Host for CDOGS Service |\n| ches\\_host | Host for CHES Service |\n| service\\_client\\_id | Set this to *YOUR* client id from GETOK |\n| service\\_client\\_secret | Set this to *YOUR* client secret from GETOK |\n| email\\_to | Set this to *YOUR* email, you will get emails from CHES |\n\n  \n\n### Environments \nBy default, the hosts are set to the DEV environment.\n\n| DEV | URL |\n| --- | --- |\n| auth\\_host | https://dev.oidc.gov.bc.ca |\n| cdogs\\_host | https://cdogs-dev.apps.silver.devops.gov.bc.ca |\n| ches\\_host | https://ches-dev.apps.silver.devops.gov.bc.ca |\n\n| TEST | URL |\n| --- | --- |\n| auth\\_host | https://test.oidc.gov.bc.ca |\n| cdogs\\_host | https://cdogs-test.apps.silver.devops.gov.bc.ca |\n| ches\\_host | https://ches-test.apps.silver.devops.gov.bc.ca |\n\n| PROD | URL |\n| --- | --- |\n| auth\\_host | https://oidc.gov.bc.ca |\n| cdogs\\_host | https://cdogs.nrs.gov.bc.ca |\n| ches\\_host | https://ches.nrs.gov.bc.ca |\n\n## Overview\nOnce you have set the host and client id/secret variables, you can begin running the API calls. The order of the calls is very important, as each call will set variables that are used in subsequent calls. In particular, you will always want to run \"Request a Token\" first.  If you encounter any 401 responses, try getting a new token.  \n\nEach of the calls has a test (ensuring an expected response, checking headers, response values, etc.). Feel free to familiarize yourself with [tests and scripts](https://learning.postman.com/docs/postman/scripts/intro-to-scripts/). There is code in some Pre-request Scripts and Tests.  For example, setting the delayTS variable for delayed emails is done in a Pre-request Script. All ids used for getting or deleting a particular resource are done in Test scripts (read value, set a collection variable for next test).  \n\nIn the urls and the request body, you will notice collection variables or test variables like: `{{email_to}}`, `{{auth_host}}` and `{{delay_ts}}`.  In the CDOGS calls, you may notice a different variable substitution: `{d.firstName}` - this is for the CDOGS template substitution, not the Postman substitution.  Look at [CDOGS Application readme](https://github.com/bcgov/common-document-generation-service/blob/master/app/README.md) for more information.   \n\n### Run the collection\nUse the [collection runner](https://learning.postman.com/docs/postman/collection-runs/intro-to-collection-runs/) to completely smoke test your credentials and the Common Services environments.  When running the collection, you should de-select the final call: **\"CDOGS/upload template (select local template for body)\"**, this call requires you to select a local file to upload as a template and cannot be automated.  Also, if you have previously uploaded a file through this call, you can expect to receive a 405 if the template is still in the server cache.    \n\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Request a Token",
			"item": [
				{
					"name": "Request a Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a80fbc93-9178-4cb5-a71a-74b02a4c4bed",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.collectionVariables.set('access_token', jsonData.access_token);",
									"    pm.collectionVariables.set('session_tag', jsonData.session_state.substring(0,8));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{service_client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{service_client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{auth_host}}/auth/realms/jbd6rnxw/protocol/openid-connect/token",
							"host": [
								"{{auth_host}}"
							],
							"path": [
								"auth",
								"realms",
								"jbd6rnxw",
								"protocol",
								"openid-connect",
								"token"
							]
						},
						"description": "This request will get an OAuth Access Token that is required for calls to the Common Services API's.\n\nThe reponse from this request (the Access Token) can be attached to the top level 'Common Services' collection and then 'Inherited from parent' by the requests contained inside it."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CHES - Hosted Email Service",
			"item": [
				{
					"name": "health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da5a309a-526a-4150-8475-19a06fe0878b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('dependencies');",
									"    pm.expect(jsonData.dependencies).to.have.length(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/health",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "send email message",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad6f35c9-10d8-4271-a671-3729b532efbd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7d8c5344-8bcd-4597-80de-29e9653e0d07",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('txId');",
									"    pm.expect(jsonData).to.have.property('messages');",
									"    pm.expect(jsonData.messages).to.have.length(1);",
									"    pm.expect(jsonData.messages[0]).to.have.property('to');",
									"    pm.expect(jsonData.messages[0].to[0]).to.eql(pm.variables.get('email_to'));",
									"    pm.collectionVariables.set('email_msg_id', jsonData.messages[0].msgId);",
									"    pm.collectionVariables.set('email_tx_id', jsonData.txId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bcc\": [],\n  \"bodyType\": \"html\",\n  \"body\": \"<h1>Welcome to Common Services</h1><p>Sent by <a href='https://bcgov.github.io/common-hosted-email-service/'>CHES</a></p>\",\n  \"cc\": [],\n  \"delayTS\": 0,\n  \"encoding\": \"utf-8\",\n  \"from\": \"{{email_to}}\",\n  \"priority\": \"normal\",\n  \"subject\": \"CHES Email Message\",\n  \"to\": [\"{{email_to}}\"],\n  \"tag\": \"email_{{session_tag}}\",\n  \"attachments\": [\n    {\n      \"content\": \"IyBDb21tb24gSG9zdGVkIEVtYWlsIFNlcnZpY2UKTmVlZCB0byBzZW5kIGVtYWlscz8gTmVlZCB0byBzZW5kIGJ1bGsgZW1haWxzPyBOZWVkIHRvIHNlbmQgdGVtcGxhdGVkIG1lc3NhZ2VzIHBvcHVsYXRlZCBmcm9tIGEgZGF0YXNldD8gTmVlZCB0byBzY2hlZHVsZSBkZWxpdmVyeSBvZiBlbWFpbHM/ICAKClRoZSBDSEVTIEFQSSBpcyBjYXBhYmxlIG9mIGRvaW5nIHRoZSBmb2xsb3dpbmc6CgoqIFNlbmQgZW1haWxzIHdpdGggYXR0YWNobWVudHMgYW5kIHNwZWNpYWwgYnVzaW5lc3MgdGFnZ2luZy4gCiogU2NoZWR1bGUgZm9yIGRlbGF5ZWQgZGVsaXZlcnksIHdpdGggYWJpbGl0eSB0byBjYW5jZWwuIAoqIENyZWF0ZSBidWxrIGVtYWlsIG1lcmdlIHdpdGggeW91ciBvd24gdGVtcGxhdGVzLiAgCiogU2VuZCBwbGFpbiB0ZXh0IG9yIEhUTUwgZW1haWxzLiAKKiBUcmFjayB0aGUgc3RhdHVzIG9mIHlvdXIgcmVxdWVzdC4gCgpSZXZpZXcgdGhlIHYxIEFQSSBzcGVjaWZpY2F0aW9uIFtoZXJlXShodHRwczovL2NoZXMtbWFzdGVyLTlmMGZiZS1wcm9kLnBhdGhmaW5kZXIuZ292LmJjLmNhL2FwaS92MS9kb2NzKS4gIAoKU2VlIFNob3djYXNlIGFwcGxpY2F0aW9uIFtoZXJlXShodHRwczovL21zc2MucGF0aGZpbmRlci5nb3YuYmMuY2EvbXNzYy8pLiAgCgpTZWUgc291cmNlIGNvZGUgW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9iY2dvdi9jb21tb24taG9zdGVkLWVtYWlsLXNlcnZpY2UpLiAgCgpNb3JlIGluZm9ybWF0aW9uIFtoZXJlXShodHRwczovL2JjZ292LmdpdGh1Yi5pby9jb21tb24taG9zdGVkLWVtYWlsLXNlcnZpY2UvKS4gIAoKIyBDb21tb24gRG9jdW1lbnQgR2VuZXJhdGlvbiBTZXJ2aWNlCkxldmVyYWdlIHlvdXIgc3RydWN0dXJlZCBkYXRhc2V0cyBhbmQgeW91ciBidXNpbmVzcyB0ZW1wbGF0ZXMgdG8gYXV0b21hdGljYWxseSBwb3B1bGF0ZSBwcmludGFibGUgZG9jdW1lbnRzLCBzcHJlYWRzaGVldHMsIHByZXNlbnRhdGlvbnMsIG9yIFBERnMgdXNpbmcgdGhlIENvbW1vbiBEb2N1bWVudCBHZW5lcmF0aW9uIFNlcnZpY2UuICAKClRoZSBBUEkgY2FuIGdlbmVyYXRlIGFueSBQREYgb3IgWE1MLWJhc2VkIGRvY3VtZW50cyBzdWNoIGFzIGRvY3gsIHhsc3gsIHBwdHgsIG9kdCwgb2RzLCBvZHAsIGFuZCBodG1sLiBFeGFtcGxlcyBvZiBYTUwtYmFzZWQgZWRpdG9ycyBpbmNsdWRlIE1pY3Jvc29mdCBPZmZpY2XihKIsIExpYnJlT2ZmaWNl4oSiIG9yIE9wZW5PZmZpY2XihKIuCgpUaGUgQ0RPR1MgQVBJIGlzIGNhcGFibGUgb2YgZG9pbmcgdGhlIGZvbGxvd2luZzoKCiogTWVyZ2UgY29tcGxleCBkYXRhc2V0cyBpbnRvIGRvY3VtZW50IHRlbXBsYXRlcy4gCiogU3VwcG9ydHMgYW55IFhNTC1iYXNlZCBkb2N1bWVudCB0ZW1wbGF0ZXMgaW5jbHVkaW5nIGJ1dCBub3QgbGltaXRlZCB0byBNaWNyb3NvZnQgT2ZmaWNl4oSiLCBMaWJyZU9mZmljZeKEoiBvciBPcGVuT2ZmaWNl4oSiLiAKKiBSaWNoIHRlbXBsYXRpbmcgbGlicmFyeSBzdXBwb3J0IGxldmVyYWdpbmcgdGhlIENhcmJvbmUgSlMgbGlicmFyeS4gCgpSZXZpZXcgdGhlIHYxIEFQSSBzcGVjaWZpY2F0aW9uIFtoZXJlXShodHRwczovL2Nkb2dzLW1hc3Rlci1pZGNxdmwtcHJvZC5wYXRoZmluZGVyLmdvdi5iYy5jYS9hcGkvdjEvZG9jcyN0YWcvRG9jR2VuKS4gIAoKUmV2aWV3IHRoZSB2MiBBUEkgc3BlY2lmaWNhdGlvbiBbaGVyZV0oaHR0cHM6Ly9jZG9ncy1tYXN0ZXItaWRjcXZsLXByb2QucGF0aGZpbmRlci5nb3YuYmMuY2EvYXBpL3YyL2RvY3MjdGFnL0RvY0dlbikuICAKClNlZSBTaG93Y2FzZSBhcHBsaWNhdGlvbiBbaGVyZV0oaHR0cHM6Ly9kZ3JzYy5wYXRoZmluZGVyLmdvdi5iYy5jYS9kZ3JzYy8pLiAgCgpTZWUgc291cmNlIGNvZGUgW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9iY2dvdi9jb21tb24tZG9jdW1lbnQtZ2VuZXJhdGlvbi1zZXJ2aWNlKS4gIAoKTW9yZSBpbmZvcm1hdGlvbiBbaGVyZV0oaHR0cHM6Ly9iY2dvdi5naXRodWIuaW8vY29tbW9uLWRvY3VtZW50LWdlbmVyYXRpb24tc2VydmljZS8pLiAgCgoKIyMjIyBDb21tb24gU2VydmljZXMgU2hvd2Nhc2UKVmlzaXQgW0NvbW1vbiBTZXJ2aWNlcyBTaG93Y2FzZV0oaHR0cHM6Ly9iY2dvdi5naXRodWIuaW8vY29tbW9uLXNlcnZpY2Utc2hvd2Nhc2UvKSBmb3IgbW9yZSBpbmZvcm1hdGlvbjsgaW5jbHVkaW5nIGhvdyB0byBnZXQgYWNjZXNzIHRvIGNvbW1vbiBzZXJ2aWNlcy4gICA=\",\n      \"contentType\": \"text/markdown\",\n      \"encoding\": \"base64\",\n      \"filename\": \"readme.md\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ches_host}}/api/v1/email",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"email"
							],
							"query": [
								{
									"key": "devMode",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get status history of message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7acb0b39-bda8-4a6f-9620-3019502f8a70",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('txId');",
									"    pm.expect(jsonData).to.have.property('msgId');",
									"    pm.expect(jsonData).to.have.property('txId',pm.collectionVariables.get('email_tx_id'));",
									"    pm.expect(jsonData).to.have.property('msgId', pm.collectionVariables.get('email_msg_id'));",
									"    pm.expect(jsonData).to.have.property('statusHistory');",
									"    pm.expect(jsonData.statusHistory).to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/status/{{email_msg_id}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"status",
								"{{email_msg_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get status by transaction id (txId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79d9eaa5-6c41-4950-a812-ba6fb41a8884",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData).to.have.lengthOf(1);",
									"    pm.expect(jsonData[0]).to.have.property('txId',pm.collectionVariables.get('email_tx_id'));",
									"    pm.expect(jsonData[0]).to.have.property('msgId', pm.collectionVariables.get('email_msg_id'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/status?txId={{email_tx_id}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							],
							"query": [
								{
									"key": "msgId",
									"value": "7ebbbdad-0671-44aa-91d9-36151308df73",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "tag",
									"disabled": true
								},
								{
									"key": "txId",
									"value": "{{email_tx_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get status by message id (msgId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c11dbcf-5ee1-4e77-a427-411b70a0c4eb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData).to.have.lengthOf(1);",
									"    pm.expect(jsonData[0]).to.have.property('txId',pm.collectionVariables.get('email_tx_id'));",
									"    pm.expect(jsonData[0]).to.have.property('msgId', pm.collectionVariables.get('email_msg_id'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/status?msgId={{email_msg_id}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							],
							"query": [
								{
									"key": "msgId",
									"value": "7ebbbdad-0671-44aa-91d9-36151308df73",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "tag",
									"disabled": true
								},
								{
									"key": "msgId",
									"value": "{{email_msg_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get status by tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e34e7046-fcce-4b1d-adc8-e3bd1e6e7e7b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData).to.have.length.of.at.least(1);",
									"    pm.expect(jsonData.some(x => x.txId === pm.collectionVariables.get('email_tx_id')));",
									"    pm.expect(jsonData.some(x => x.msgId === pm.collectionVariables.get('email_msg_id')));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/status?tag=email_{{session_tag}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							],
							"query": [
								{
									"key": "msgId",
									"value": "7ebbbdad-0671-44aa-91d9-36151308df73",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "tag",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "email_{{session_tag}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "send email merge (bulk emails)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5b6a773d-64af-4a30-b24d-76c23651ceca",
								"exec": [
									"var d = new Date();",
									"var delayTS = d.setMinutes(d.getMinutes() + 2);",
									"pm.variables.set('delay_ts', delayTS);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98164bcc-3a7e-43d1-a26e-3191f8463a24",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('txId');",
									"    pm.expect(jsonData).to.have.property('messages');",
									"    pm.expect(jsonData.messages).to.have.length(2);",
									"    pm.expect(jsonData.messages.every(x => x.to === pm.variables.get('email_to')));",
									"    pm.collectionVariables.set('merge_msg_id', jsonData.messages[0].msgId);",
									"    pm.collectionVariables.set('merge_tx_id', jsonData.txId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bodyType\": \"text\",\n  \"body\": \"Hello from CHES. The following is filled in by during the merge: {{ hello }}\",\n  \"contexts\": [\n    {\n      \"to\": [\"{{email_to}}\"],\n      \"context\": {\n        \"orange\": {\n          \"target\": \"delay\"\n        },\n        \"hello\": \"This message was sent with a 2 minute delay.\"\n      },\n      \"delayTS\": {{delay_ts}},\n      \"tag\": \"merge_{{session_tag}}\"\n    },\n    {\n      \"to\": [\"{{email_to}}\"],\n      \"context\": {\n        \"orange\": {\n          \"target\": \"immediate\"\n        },\n        \"hello\": \"This message was sent immediately.\"\n      },\n      \"delayTS\": 0,\n      \"tag\": \"merge_{{session_tag}}\"\n    }\n  ],\n  \"encoding\": \"utf-8\",\n  \"from\": \"{{email_to}}\",\n  \"priority\": \"normal\",\n  \"subject\": \"CHES Email Merge {{ orange.target }}\",\n  \"attachments\": [\n    {\n      \"content\": \"IyBDb21tb24gSG9zdGVkIEVtYWlsIFNlcnZpY2UKTmVlZCB0byBzZW5kIGVtYWlscz8gTmVlZCB0byBzZW5kIGJ1bGsgZW1haWxzPyBOZWVkIHRvIHNlbmQgdGVtcGxhdGVkIG1lc3NhZ2VzIHBvcHVsYXRlZCBmcm9tIGEgZGF0YXNldD8gTmVlZCB0byBzY2hlZHVsZSBkZWxpdmVyeSBvZiBlbWFpbHM/ICAKClRoZSBDSEVTIEFQSSBpcyBjYXBhYmxlIG9mIGRvaW5nIHRoZSBmb2xsb3dpbmc6CgoqIFNlbmQgZW1haWxzIHdpdGggYXR0YWNobWVudHMgYW5kIHNwZWNpYWwgYnVzaW5lc3MgdGFnZ2luZy4gCiogU2NoZWR1bGUgZm9yIGRlbGF5ZWQgZGVsaXZlcnksIHdpdGggYWJpbGl0eSB0byBjYW5jZWwuIAoqIENyZWF0ZSBidWxrIGVtYWlsIG1lcmdlIHdpdGggeW91ciBvd24gdGVtcGxhdGVzLiAgCiogU2VuZCBwbGFpbiB0ZXh0IG9yIEhUTUwgZW1haWxzLiAKKiBUcmFjayB0aGUgc3RhdHVzIG9mIHlvdXIgcmVxdWVzdC4gCgpSZXZpZXcgdGhlIHYxIEFQSSBzcGVjaWZpY2F0aW9uIFtoZXJlXShodHRwczovL2NoZXMtbWFzdGVyLTlmMGZiZS1wcm9kLnBhdGhmaW5kZXIuZ292LmJjLmNhL2FwaS92MS9kb2NzKS4gIAoKU2VlIFNob3djYXNlIGFwcGxpY2F0aW9uIFtoZXJlXShodHRwczovL21zc2MucGF0aGZpbmRlci5nb3YuYmMuY2EvbXNzYy8pLiAgCgpTZWUgc291cmNlIGNvZGUgW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9iY2dvdi9jb21tb24taG9zdGVkLWVtYWlsLXNlcnZpY2UpLiAgCgpNb3JlIGluZm9ybWF0aW9uIFtoZXJlXShodHRwczovL2JjZ292LmdpdGh1Yi5pby9jb21tb24taG9zdGVkLWVtYWlsLXNlcnZpY2UvKS4gIAoKIyBDb21tb24gRG9jdW1lbnQgR2VuZXJhdGlvbiBTZXJ2aWNlCkxldmVyYWdlIHlvdXIgc3RydWN0dXJlZCBkYXRhc2V0cyBhbmQgeW91ciBidXNpbmVzcyB0ZW1wbGF0ZXMgdG8gYXV0b21hdGljYWxseSBwb3B1bGF0ZSBwcmludGFibGUgZG9jdW1lbnRzLCBzcHJlYWRzaGVldHMsIHByZXNlbnRhdGlvbnMsIG9yIFBERnMgdXNpbmcgdGhlIENvbW1vbiBEb2N1bWVudCBHZW5lcmF0aW9uIFNlcnZpY2UuICAKClRoZSBBUEkgY2FuIGdlbmVyYXRlIGFueSBQREYgb3IgWE1MLWJhc2VkIGRvY3VtZW50cyBzdWNoIGFzIGRvY3gsIHhsc3gsIHBwdHgsIG9kdCwgb2RzLCBvZHAsIGFuZCBodG1sLiBFeGFtcGxlcyBvZiBYTUwtYmFzZWQgZWRpdG9ycyBpbmNsdWRlIE1pY3Jvc29mdCBPZmZpY2XihKIsIExpYnJlT2ZmaWNl4oSiIG9yIE9wZW5PZmZpY2XihKIuCgpUaGUgQ0RPR1MgQVBJIGlzIGNhcGFibGUgb2YgZG9pbmcgdGhlIGZvbGxvd2luZzoKCiogTWVyZ2UgY29tcGxleCBkYXRhc2V0cyBpbnRvIGRvY3VtZW50IHRlbXBsYXRlcy4gCiogU3VwcG9ydHMgYW55IFhNTC1iYXNlZCBkb2N1bWVudCB0ZW1wbGF0ZXMgaW5jbHVkaW5nIGJ1dCBub3QgbGltaXRlZCB0byBNaWNyb3NvZnQgT2ZmaWNl4oSiLCBMaWJyZU9mZmljZeKEoiBvciBPcGVuT2ZmaWNl4oSiLiAKKiBSaWNoIHRlbXBsYXRpbmcgbGlicmFyeSBzdXBwb3J0IGxldmVyYWdpbmcgdGhlIENhcmJvbmUgSlMgbGlicmFyeS4gCgpSZXZpZXcgdGhlIHYxIEFQSSBzcGVjaWZpY2F0aW9uIFtoZXJlXShodHRwczovL2Nkb2dzLW1hc3Rlci1pZGNxdmwtcHJvZC5wYXRoZmluZGVyLmdvdi5iYy5jYS9hcGkvdjEvZG9jcyN0YWcvRG9jR2VuKS4gIAoKUmV2aWV3IHRoZSB2MiBBUEkgc3BlY2lmaWNhdGlvbiBbaGVyZV0oaHR0cHM6Ly9jZG9ncy1tYXN0ZXItaWRjcXZsLXByb2QucGF0aGZpbmRlci5nb3YuYmMuY2EvYXBpL3YyL2RvY3MjdGFnL0RvY0dlbikuICAKClNlZSBTaG93Y2FzZSBhcHBsaWNhdGlvbiBbaGVyZV0oaHR0cHM6Ly9kZ3JzYy5wYXRoZmluZGVyLmdvdi5iYy5jYS9kZ3JzYy8pLiAgCgpTZWUgc291cmNlIGNvZGUgW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9iY2dvdi9jb21tb24tZG9jdW1lbnQtZ2VuZXJhdGlvbi1zZXJ2aWNlKS4gIAoKTW9yZSBpbmZvcm1hdGlvbiBbaGVyZV0oaHR0cHM6Ly9iY2dvdi5naXRodWIuaW8vY29tbW9uLWRvY3VtZW50LWdlbmVyYXRpb24tc2VydmljZS8pLiAgCgoKIyMjIyBDb21tb24gU2VydmljZXMgU2hvd2Nhc2UKVmlzaXQgW0NvbW1vbiBTZXJ2aWNlcyBTaG93Y2FzZV0oaHR0cHM6Ly9iY2dvdi5naXRodWIuaW8vY29tbW9uLXNlcnZpY2Utc2hvd2Nhc2UvKSBmb3IgbW9yZSBpbmZvcm1hdGlvbjsgaW5jbHVkaW5nIGhvdyB0byBnZXQgYWNjZXNzIHRvIGNvbW1vbiBzZXJ2aWNlcy4gICA=\",\n      \"contentType\": \"text/markdown\",\n      \"encoding\": \"base64\",\n      \"filename\": \"readme.md\"\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{ches_host}}/api/v1/emailMerge",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"emailMerge"
							],
							"query": [
								{
									"key": "devMode",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get status of merge messages with txId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b5bf824-2f57-492a-a3bf-fdab849e34a5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData).to.have.lengthOf(2);",
									"    pm.expect(jsonData.every(x => x.txId === pm.collectionVariables.get('merge_tx_id')));",
									"    pm.expect(jsonData.some(x => x.msgId === pm.collectionVariables.get('merge_msg_id')));",
									"    pm.expect(jsonData.some(x => x.status === 'pending'));",
									"    pm.collectionVariables.set('pending_msg_id', jsonData.find(x => x.status === 'pending').msgId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "221f02cd-81b3-4039-9684-cc5d79d3678f",
								"exec": [
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/status?txId={{merge_tx_id}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							],
							"query": [
								{
									"key": "msgId",
									"value": "7ebbbdad-0671-44aa-91d9-36151308df73",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "tag",
									"disabled": true
								},
								{
									"key": "txId",
									"value": "{{merge_tx_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "send email message with delay",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d2ade78-8f5c-4108-85ea-380bcac733e9",
								"exec": [
									"var d = new Date();",
									"var delayTS = d.setMinutes(d.getMinutes() + 5);",
									"pm.variables.set('delay_ts', delayTS);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9df9da19-543f-4aaa-be52-11742374f0d6",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('txId');",
									"    pm.expect(jsonData).to.have.property('messages');",
									"    pm.expect(jsonData.messages).to.have.length(1);",
									"    pm.expect(jsonData.messages[0]).to.have.property('to');",
									"    pm.expect(jsonData.messages[0].to[0]).to.eql(pm.variables.get('email_to'));",
									"    pm.collectionVariables.set('delay_msg_id', jsonData.messages[0].msgId);",
									"    pm.collectionVariables.set('delay_tx_id', jsonData.txId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bcc\": [],\n  \"bodyType\": \"html\",\n  \"body\": \"<h1>Welcome to Common Services</h1><p>Delayed message sent by <a href='https://bcgov.github.io/common-hosted-email-service/'>CHES</a></p>\",\n  \"cc\": [],\n  \"delayTS\": {{delay_ts}},\n  \"encoding\": \"utf-8\",\n  \"from\": \"{{email_to}}\",\n  \"priority\": \"normal\",\n  \"subject\": \"CHES Email Message (Delayed)\",\n  \"to\": [\"{{email_to}}\"],\n  \"tag\": \"delayed_{{session_tag}}\",\n  \"attachments\": []\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ches_host}}/api/v1/email",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"email"
							],
							"query": [
								{
									"key": "devMode",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cancel delayed message by txId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2048739b-ff19-40f3-bc8b-bd5441c88cf4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/cancel?txId={{delay_tx_id}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"cancel"
							],
							"query": [
								{
									"key": "msgId",
									"value": "dd42b60e-d420-4fdb-95fa-e31dd78479eb",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "tag",
									"disabled": true
								},
								{
									"key": "txId",
									"value": "{{delay_tx_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get status of cancelled message by txId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8169bbdf-3255-409e-ab95-afd82936a720",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData).to.have.lengthOf(1);",
									"    pm.expect(jsonData[0].txId === pm.collectionVariables.get('delay_tx_id'));",
									"    pm.expect(jsonData[0].msgId === pm.collectionVariables.get('delay_msg_id'));",
									"    pm.expect(jsonData[0].status === 'cancelled');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/status?txId={{delay_tx_id}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							],
							"query": [
								{
									"key": "msgId",
									"value": "7ebbbdad-0671-44aa-91d9-36151308df73",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "tag",
									"disabled": true
								},
								{
									"key": "txId",
									"value": "{{delay_tx_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "send email message with delay (#2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae6ba61b-24d5-4eb8-bbcb-205c6a0f1bf3",
								"exec": [
									"var d = new Date();",
									"var delayTS = d.setMinutes(d.getMinutes() + 5);",
									"pm.variables.set('delay_ts', delayTS);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c752a82f-cdb1-4e8b-9629-f48907fd3351",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('txId');",
									"    pm.expect(jsonData).to.have.property('messages');",
									"    pm.expect(jsonData.messages).to.have.length(1);",
									"    pm.expect(jsonData.messages[0]).to.have.property('to');",
									"    pm.expect(jsonData.messages[0].to[0]).to.eql(pm.variables.get('email_to'));",
									"    pm.collectionVariables.set('delay_2_msg_id', jsonData.messages[0].msgId);",
									"    pm.collectionVariables.set('delay_2_tx_id', jsonData.txId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bcc\": [],\n  \"bodyType\": \"html\",\n  \"body\": \"<h1>Welcome to Common Services</h1><p>Delayed message sent by <a href='https://bcgov.github.io/common-hosted-email-service/'>CHES</a></p>\",\n  \"cc\": [],\n  \"delayTS\": {{delay_ts}},\n  \"encoding\": \"utf-8\",\n  \"from\": \"{{email_to}}\",\n  \"priority\": \"normal\",\n  \"subject\": \"CHES Email Message (Delayed)\",\n  \"to\": [\"{{email_to}}\"],\n  \"tag\": \"delayed_2_{{session_tag}}\",\n  \"attachments\": []\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ches_host}}/api/v1/email",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"email"
							],
							"query": [
								{
									"key": "devMode",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cancel delayed message by tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6552510d-fbb5-4579-842f-8ca81e926055",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/cancel?tag=delayed_2_{{session_tag}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"cancel"
							],
							"query": [
								{
									"key": "msgId",
									"value": "dd42b60e-d420-4fdb-95fa-e31dd78479eb",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "tag",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "delayed_2_{{session_tag}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get status of cancelled message by tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9531b650-9bad-48a4-8313-8f3f560715f9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData).to.have.lengthOf(1);",
									"    pm.expect(jsonData[0].txId === pm.collectionVariables.get('delay_2_tx_id'));",
									"    pm.expect(jsonData[0].msgId === pm.collectionVariables.get('delay_2_msg_id'));",
									"    pm.expect(jsonData[0].status === 'cancelled');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/status?tag=delayed_2_{{session_tag}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							],
							"query": [
								{
									"key": "msgId",
									"value": "7ebbbdad-0671-44aa-91d9-36151308df73",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "tag",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "delayed_2_{{session_tag}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "send email message with delay (#3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1cc9d754-a59d-4832-9903-d9eb316ed0a6",
								"exec": [
									"var d = new Date();",
									"var delayTS = d.setMinutes(d.getMinutes() + 5);",
									"pm.variables.set('delay_ts', delayTS);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4bd42940-322e-4ee7-81d1-8ac0ceab7512",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('txId');",
									"    pm.expect(jsonData).to.have.property('messages');",
									"    pm.expect(jsonData.messages).to.have.length(1);",
									"    pm.expect(jsonData.messages[0]).to.have.property('to');",
									"    pm.expect(jsonData.messages[0].to[0]).to.eql(pm.variables.get('email_to'));",
									"    pm.collectionVariables.set('delay_3_msg_id', jsonData.messages[0].msgId);",
									"    pm.collectionVariables.set('delay_3_tx_id', jsonData.txId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bcc\": [],\n  \"bodyType\": \"html\",\n  \"body\": \"<h1>Welcome to Common Services</h1><p>Delayed message sent by <a href='https://bcgov.github.io/common-hosted-email-service/'>CHES</a></p>\",\n  \"cc\": [],\n  \"delayTS\": {{delay_ts}},\n  \"encoding\": \"utf-8\",\n  \"from\": \"{{email_to}}\",\n  \"priority\": \"normal\",\n  \"subject\": \"CHES Email Message (Delayed)\",\n  \"to\": [\"{{email_to}}\"],\n  \"tag\": \"delayed_3_{{session_tag}}\",\n  \"attachments\": []\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ches_host}}/api/v1/email",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"email"
							],
							"query": [
								{
									"key": "devMode",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get status of delayed message (#3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3205cca5-2d2d-445a-a123-1342c275b1fa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.txId === pm.collectionVariables.get('delay_3_tx_id'));",
									"    pm.expect(jsonData.msgId === pm.collectionVariables.get('delay_3_msg_id'));",
									"    pm.expect(jsonData.status === 'pending');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/status/{{delay_3_msg_id}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"status",
								"{{delay_3_msg_id}}"
							],
							"query": [
								{
									"key": "msgId",
									"value": "7ebbbdad-0671-44aa-91d9-36151308df73",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "tag",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "cancel delayed message (#3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92658401-ce1e-4b3e-9dd3-8e5a8cb55417",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/cancel/{{delay_3_msg_id}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"cancel",
								"{{delay_3_msg_id}}"
							],
							"query": [
								{
									"key": "msgId",
									"value": "dd42b60e-d420-4fdb-95fa-e31dd78479eb",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "tag",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get status of cancelled message (#3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f90a95c6-9d7d-4173-925a-ba1730aea238",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.txId === pm.collectionVariables.get('delay_3_tx_id'));",
									"    pm.expect(jsonData.msgId === pm.collectionVariables.get('delay_3_msg_id'));",
									"    pm.expect(jsonData.status === 'cancelled');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ches_host}}/api/v1/status/{{delay_3_msg_id}}",
							"host": [
								"{{ches_host}}"
							],
							"path": [
								"api",
								"v1",
								"status",
								"{{delay_3_msg_id}}"
							],
							"query": [
								{
									"key": "msgId",
									"value": "7ebbbdad-0671-44aa-91d9-36151308df73",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "tag",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "10ff8eb3-cfaf-44a4-b5e7-06558d3e9d42",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9f641a74-5cc4-45fd-9b62-6d87e054429f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CDOGS - Document Generation Service",
			"item": [
				{
					"name": "health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5b832d6-56d0-4d33-a572-57636ef9dba8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{cdogs_host}}/api/v2/health",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "get fileTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c19d0f9-c8a5-43d2-a335-20553b90d5a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('dictionary');",
									"",
									"    pm.expect(jsonData.dictionary).to.have.property('csv');",
									"    pm.expect(jsonData.dictionary.csv).to.have.length.of.at.least(1);",
									"",
									"    pm.expect(jsonData.dictionary).to.have.property('docx');",
									"    pm.expect(jsonData.dictionary.docx).to.have.length.of.at.least(1);",
									"",
									"    pm.expect(jsonData.dictionary).to.have.property('html');",
									"    pm.expect(jsonData.dictionary.html).to.have.length.of.at.least(1);",
									"",
									"    pm.expect(jsonData.dictionary).to.have.property('odt');",
									"    pm.expect(jsonData.dictionary.odt).to.have.length.of.at.least(1);",
									"",
									"    pm.expect(jsonData.dictionary).to.have.property('pptx');",
									"    pm.expect(jsonData.dictionary.pptx).to.have.length.of.at.least(1);",
									"",
									"    pm.expect(jsonData.dictionary).to.have.property('rtf');",
									"    pm.expect(jsonData.dictionary.rtf).to.have.length.of.at.least(1);",
									" ",
									"    pm.expect(jsonData.dictionary).to.have.property('txt');",
									"    pm.expect(jsonData.dictionary.txt).to.have.length.of.at.least(1);",
									"",
									"    pm.expect(jsonData.dictionary).to.have.property('xlsx');",
									"    pm.expect(jsonData.dictionary.xlsx).to.have.length.of.at.least(1);",
									"   ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{cdogs_host}}/api/v2/fileTypes",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"fileTypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload template, cache and render report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f63baa5-0b89-43a1-91f6-c4f171e61fd2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.header('X-Report-Name');",
									"    pm.response.to.have.header('X-Template-Hash');",
									"    pm.response.to.have.header('X-Report-Hash');",
									"",
									"    pm.collectionVariables.set('cdogs_template_hash', pm.response.headers.get('X-Template-Hash'));",
									"    pm.collectionVariables.set('cdogs_report_hash', pm.response.headers.get('X-Report-Hash'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"firstName\": \"Jane\",\n        \"lastName\": \"Smith\",\n        \"title\": \"CEO\"\n    },\n    \"formatters\": \"{\\\"myFormatter\\\":\\\"_function_myFormatter|function(data) { return data.slice(1); }\\\",\\\"myOtherFormatter\\\":\\\"_function_myOtherFormatter|function(data) {return data.slice(2);}\\\"}\",\n    \"options\": {\n        \"cacheReport\": true,\n        \"convertTo\": \"pdf\",\n        \"overwrite\": true,\n        \"reportName\": \"{d.firstName}-{d.lastName}.pdf\"\n    },\n    \"template\": {\n        \"encodingType\": \"base64\",\n        \"fileType\": \"docx\",\n        \"content\": \"\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/template/render",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"template",
								"render"
							]
						}
					},
					"response": []
				},
				{
					"name": "check if template exists (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3449efd8-daca-4cdd-92ad-cc0342e2b275",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.header('X-Template-Hash');",
									"    pm.response.to.be.header('X-Template-Hash', pm.collectionVariables.get('cdogs_template_hash'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/template/{{cdogs_template_hash}}",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"template",
								"{{cdogs_template_hash}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "download existing template",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4acbfd1c-0b87-426b-ae48-b9d15a09564a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.header('X-Template-Hash');",
									"    pm.response.to.be.header('X-Template-Hash', pm.collectionVariables.get('cdogs_template_hash'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/template/{{cdogs_template_hash}}?download=true",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"template",
								"{{cdogs_template_hash}}"
							],
							"query": [
								{
									"key": "download",
									"value": "true",
									"description": "boolean, indicate if the response should return the binary file"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "download cached report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e6257c4-3cf1-4a10-be91-5df3b0148b97",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.header('X-Report-Hash');",
									"    pm.response.to.be.header('X-Report-Hash', pm.collectionVariables.get('cdogs_report_hash'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/render/{{cdogs_report_hash}}?download=true",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"render",
								"{{cdogs_report_hash}}"
							],
							"query": [
								{
									"key": "download",
									"value": "true",
									"description": "boolean, Indicate if the response should return the binary file"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete cached report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "caeb124b-9da4-44b7-b4dd-8de52ca52906",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/render/{{cdogs_report_hash}}",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"render",
								"{{cdogs_report_hash}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get non-existent report (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ae9fc38-b9db-4735-855e-85c502ddb5da",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/render/{{cdogs_report_hash}}?download=true",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"render",
								"{{cdogs_report_hash}}"
							],
							"query": [
								{
									"key": "download",
									"value": "true",
									"description": "boolean, Indicate if the response should return the binary file"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete non-existent report (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29513042-577b-43cf-af51-d7f8cd6cd3bf",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/render/{{cdogs_report_hash}}",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"render",
								"{{cdogs_report_hash}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "render using existing template (no cache)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a62bbab6-db18-46c3-85f0-41d54933b233",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.header('X-Report-Name');",
									"    pm.response.to.have.header('X-Template-Hash');",
									"    pm.response.to.be.header('X-Template-Hash', pm.collectionVariables.get('cdogs_template_hash'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"firstName\": \"Joe\",\n        \"lastName\": \"Smith\",\n        \"title\": \"Head of Marketing\"\n    },\n    \"formatters\": \"{\\\"myFormatter\\\":\\\"_function_myFormatter|function(data) { return data.slice(1); }\\\",\\\"myOtherFormatter\\\":\\\"_function_myOtherFormatter|function(data) {return data.slice(2);}\\\"}\",\n    \"options\": {\n        \"cacheReport\": false,\n        \"convertTo\": \"pdf\",\n        \"overwrite\": true,\n        \"reportName\": \"filename-{d.firstName}_{d.lastName}.pdf\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/template/{{cdogs_template_hash}}/render",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"template",
								"{{cdogs_template_hash}}",
								"render"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete cached template",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84782bcf-64b7-4752-be91-c0ebd65fb42e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/template/{{cdogs_template_hash}}",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"template",
								"{{cdogs_template_hash}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete non-existent template (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dfab4e6-0c7b-4f04-9830-50514a065d2a",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/template/{{cdogs_template_hash}}",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"template",
								"{{cdogs_template_hash}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get non-existent template (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c05cbad8-04b4-4a6e-8c15-685e6635043d",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/template/{{cdogs_template_hash}}",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"template",
								"{{cdogs_template_hash}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "render using non-existing template (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3de0b9c5-ef8d-42d8-a170-27306646dfba",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"firstName\": \"Joe\",\n        \"lastName\": \"Smith\",\n        \"title\": \"Head of Marketing\"\n    },\n    \"formatters\": \"{\\\"myFormatter\\\":\\\"_function_myFormatter|function(data) { return data.slice(1); }\\\",\\\"myOtherFormatter\\\":\\\"_function_myOtherFormatter|function(data) {return data.slice(2);}\\\"}\",\n    \"options\": {\n        \"cacheReport\": true,\n        \"convertTo\": \"pdf\",\n        \"overwrite\": true,\n        \"reportName\": \"filename-{d.firstName}_{d.lastName}.pdf\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/template/{{cdogs_template_hash}}/render",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"template",
								"{{cdogs_template_hash}}",
								"render"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload template (select local template for body)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ede54c1-45db-4572-9787-fddc9475eca4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.header('X-Template-Hash');",
									"",
									"    pm.collectionVariables.set('cdogs_template_hash_2', pm.response.headers.get('X-Template-Hash'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "template",
									"contentType": "",
									"description": "a template, binary file content",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{cdogs_host}}/api/v2/template",
							"host": [
								"{{cdogs_host}}"
							],
							"path": [
								"api",
								"v2",
								"template"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{access_token}}",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a48ceb83-4c6a-475e-97ff-136c13e57894",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "788c7d19-7777-4cc2-a22e-712e01a40fe7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "dda72f59-41fe-45ca-bb86-60f042c24faa",
			"key": "access_token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI5Rm5UcVlVRkxnbTFIbTJIOThnWEJhWnpPcXBnMFlWU1NvNHBESlVuNXZ3In0.eyJqdGkiOiJhNjdiOWQyNy0yMmI0LTRhYjUtYjQ4MC03MzBkMDMxYTA2NzgiLCJleHAiOjE1OTI1MTAwNTMsIm5iZiI6MCwiaWF0IjoxNTkyNDkyMDUzLCJpc3MiOiJodHRwczovL3Nzby1kZXYucGF0aGZpbmRlci5nb3YuYmMuY2EvYXV0aC9yZWFsbXMvamJkNnJueHciLCJhdWQiOlsiQ0RPR1MiLCJDSEVTIl0sInN1YiI6IjUwMmEzOTQ3LTM1YWItNDViMS04YmExLWJmOGM4NTNlNjkwZiIsInR5cCI6IkJlYXJlciIsImF6cCI6IlRFTVBfU0VSVklDRV9DTElFTlQiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiJjZjJjZmU3Yy05NTEwLTQ3NzktYmI1Ni00NjJhYzEyMDBkYmMiLCJhY3IiOiIxIiwicmVzb3VyY2VfYWNjZXNzIjp7IlRFTVBfU0VSVklDRV9DTElFTlQiOnsicm9sZXMiOlsidW1hX3Byb3RlY3Rpb24iLCJDT01NT05fU0VSVklDRVMiXX0sIkNET0dTIjp7InJvbGVzIjpbIkdFTkVSQVRPUiIsInVtYV9wcm90ZWN0aW9uIl19LCJDSEVTIjp7InJvbGVzIjpbIkVNQUlMRVIiLCJ1bWFfcHJvdGVjdGlvbiJdfX0sInNjb3BlIjoiIiwiY2xpZW50SWQiOiJURU1QX1NFUlZJQ0VfQ0xJRU5UIiwiY2xpZW50SG9zdCI6IjI0LjY5LjE1NC41NiIsImNsaWVudEFkZHJlc3MiOiIyNC42OS4xNTQuNTYifQ.XX4g8EzTg7zO0u1yJ5aw_cDk69BnZwPOcap5amKRRApmoUw3dhUU4-pC_LGZ2xkBNgYfs5V9yPU8P1vldmOOmftPsbP4yflHk--4nYdO_8_fcL57uG8knBevswgC8zYNAeafPKC6PLKiV0CpAAtbthSE7hiNYs2GHtJUKmZcIDpkRduwhLG-bN6ePQXOW7y_v7pTeZm1r35AxWEexRxsZEN4QBJhqMsKtM0TfuwOc9-kSFwRzytoTDa2wI5_XyuwU6JEQE_s-icwM0vPzzOOhFM-tUWvJsDxNrQH0o1juF6FwNYWANWJ7g8fOH0nstDDcTPevlnF6ouEvykyhFuq0g",
			"type": "string"
		},
		{
			"id": "c85e1661-8613-4141-9263-1d916fa00ffc",
			"key": "session_tag",
			"value": "cf2cfe7c",
			"type": "string"
		},
		{
			"id": "11b56520-bc3b-4907-bfec-498176d75563",
			"key": "auth_host",
			"value": "https://dev.oidc.gov.bc.ca",
			"type": "string"
		},
		{
			"id": "e9952285-fcaa-4c8d-b004-72fd70c3ffa5",
			"key": "cdogs_host",
			"value": "https://cdogs-dev.apps.silver.devops.gov.bc.ca",
			"type": "string"
		},
		{
			"id": "7e8d16db-17ce-433e-8acb-a4a08bfcbde4",
			"key": "ches_host",
			"value": "https://ches-dev.apps.silver.devops.gov.bc.ca",
			"type": "string"
		},
		{
			"id": "68056f51-9cc4-4ff8-b2e3-d9babc2b2a65",
			"key": "service_client_id",
			"value": "your_service_client_id",
			"type": "string"
		},
		{
			"id": "70d0b351-0a62-4c8a-9473-321475614fb3",
			"key": "service_client_secret",
			"value": "your_service_client_secret",
			"type": "string"
		},
		{
			"id": "5de890b7-613f-4679-8b0e-8c720289f902",
			"key": "email_to",
			"value": "your@email.here",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}
